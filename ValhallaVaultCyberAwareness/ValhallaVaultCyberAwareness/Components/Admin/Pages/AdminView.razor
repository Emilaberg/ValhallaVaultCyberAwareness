@page "/Admin/admin"
@using System.ComponentModel.DataAnnotations
@using ValhallaVaultCyberAwareness.Data.Models
@using ValhallaVaultCyberAwareness.Repositories
@inject IValhallaUow _uow
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1 class="mt-4 text-light text-center">Admin OverView </h1>
<button class="btn btn-outline-light" @onclick="NavigateToAdd">Go to Add</button>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    //Load cards with categories, segments, subcategories and questions
    <div class="row ">
        @foreach (var category in categories)
        {

            <div class="col-md-12 mb-4 bg-black">
                <div class="card bg-black text-light">
                    <div class="card-body text-center">
                        <!--Make Text a button to show Modal-->
                        <button class="btn btn-transparent text-light btn-lg mb-3" @onclick="() => OpenEditModal(category)">
                            <h1 class="card-title">@category.CategoryName</h1>
                        </button>
                        <div class="row">
                            @foreach (var segment in category.Segments)
                            {
                                <div class="col-md-4 bg-black my-3">
                                    <!--Make Text a button to show Modal-->
                                    <button class="btn btn-outline-transparent text-light mb-3" @onclick="() => OpenEditModal(segment)">
                                        <h2 class="card-title">@segment.SegmentName</h2>
                                    </button>
                                    <ul class="list-group list-group-flush">
                                        @foreach (var subCategory in segment.SubCategory)
                                        {
                                            <div class="d-flex col-12 align-items-center">
                                                <!--open modal when clicked-->
                                                <button type="button" class="btn btn-outline-light btn-lg flex-grow-1" @onclick="() => OpenEditModal(subCategory)">@subCategory.SubCategoryName</button>
                                                <button type="button" class="btn btn-outline-light dropdown-toggle dropdown-toggle-split btn-lg" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                    <span class="sr-only"></span>
                                                </button>
                                                <!--bootstrap Dropdaown menu using js-->
                                                <div class="dropdown-menu">
                                                    @foreach (var question in subCategory.Questions)
                                                    {
                                                        <button class="dropdown-item" type="button" @onclick="() => OpenEditModal(question)">Question: @question.Id</button>
                                                    }
                                                </div>
                                            </div>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
<!--open Modal based on which button is clicked-->
@if (selectedSubCategory != null)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Subcategory</h5>
                </div>
                <div class="modal-body">
                    <!--edit form vit validation and error handling-->
                    <EditForm Model="selectedSubCategory" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label>Choose segment:</label>
                            <InputSelect @bind-Value="selectedSubCategory.SegmentId" class="form-select">
                                <option value="">None</option>
                                @foreach (var segment in segments)
                                {
                                    <option value="@segment.Id">@segment.SegmentName</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="subCategoryName">Subcategory Name:</label>
                            <InputText class="form-control" id="subCategoryName" @bind-Value="selectedSubCategory.SubCategoryName" />
                            <ValidationMessage For="@(() => selectedSubCategory.SubCategoryName)" />
                            <!-- Delete button for subcategory -->
                            <button class="btn btn-outline-light" type="button" data-toggle="modal" data-target="#confirmationModal">Delete </button>
                        </div>
                        <div class="text-end">
                            <button class="btn btn-outline-light" type="submit">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-light" @onclick="ClearSelected">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--Another modal for verifying Deletes, this time implementing JS to display / hide -->
    <div class="modal" id="confirmationModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => DeleteItem(selectedSubCategory)" data-dismiss="modal">Yes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}
@if (selectedCategory != null)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Category</h5>
                </div>
                <div class="modal-body bg-dark ">
                    <!--edit form vit validation and error handling-->
                    <EditForm Model="selectedCategory" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label" for="categoryName">Category Name:</label>
                            <InputText class="form-control" id="categoryName" @bind-Value="selectedCategory.CategoryName" />
                            <!-- Add delete button for category -->
                            <button class="btn btn-outline-light" type="button" data-toggle="modal" data-target="#confirmationModal">Delete </button>
                            <ValidationMessage For="@(() => selectedCategory.CategoryName)" />
                        </div>
                        <div class="text-end">
                            <button class="btn btn-outline-light" type="submit">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-light" @onclick="ClearSelected" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--Another modal for verifying Deletes, this time implementing JS to display / hide -->
    <div class="modal" id="confirmationModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => DeleteItem(selectedCategory)" data-dismiss="modal">Yes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
}
@if (selectedQuestion != null)
{
    <div class="modal show fade " tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Category</h5>
                </div>
                <div class="modal-body bg-dark ">
                    <!--edit form vit validation and error handling-->
                    <EditForm Model="selectedQuestion" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label" for="question">Question:</label>
                            <InputText class="form-control" id="question" @bind-Value="selectedQuestion.Question" />
                            <br />
                            <label class="form-label" for="explaination">Explaination:</label>
                            <InputText class="form-control" id="explaination" @bind-Value="selectedQuestion.Explaination" />
                            <!-- Add delete button for Question -->
                            <button class="btn btn-outline-light" type="button" data-toggle="modal" data-target="#confirmationModal">Delete </button>
                            <ValidationMessage For="@(() => selectedQuestion.Question)" />
                        </div>
                        <div class="mb-3">

                            <label class="form-label">Prompts:</label>
                            @foreach (var prompt in selectedQuestion.Prompts)
                            {
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="prompt.Prompt" />
                                    <!-- Add delete button for Prompt -->
                                    <button class="btn btn-outline-light" type="button" @onclick="() => DeleteItem(prompt)">Delete </button>
                                </div>
                            }

                        </div>
                        <div class="text-end">
                            <button class="btn btn-outline-light" type="submit">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-light" @onclick="ClearSelected">Close</button>
                </div>
            </div>
        </div>
    </div>
    <!--Another modal for verifying Deletes, this time implementing JS to display / hide -->
    <div class="modal" id="confirmationModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"> Confirm Delete</h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => DeleteItem(selectedQuestion)" data-dismiss="modal">Yes</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

}
@if (selectedSegment != null)
{

    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content bg-dark text-light">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Edit Segment
                    </h5>
                </div>
                <div class="modal-body bg-dark ">
                    <!--edit form vit validation and error handling-->
                    <EditForm Model="selectedSegment" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label>Choose segment:</label>
                            <InputSelect @bind-Value="selectedSegment.CategoryId" class="form-select">
                                <option value="">None</option>
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.CategoryName</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="segmentName">
                                Category
                                Name:
                            </label>
                            <InputText class="form-control" id="segmentName" @bind-Value="selectedSegment.SegmentName" />
                            <!-- Add delete button for category -->
                            <button class="btn btn-outline-light" type="button" data-toggle="modal" data-target="#confirmationModal">
                                Delete
                            </button>
                        </div>
                        <div class="text-end">
                            <button class="btn btn-outline-light" type="submit">
                                Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-light" @onclick="ClearSelected">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
    <!--Another modal for verifying Deletes, this time implementing JS to display / hide -->
    <div class="modal" id="confirmationModal" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Confirm Delete
                    </h5>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => DeleteItem(selectedSegment)" data-dismiss="modal">
                        Yes
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No
                    </button>
                </div>
            </div>
        </div>
    </div>
}




@code {
    public List<CategoryModel>? categories = [];
    public List<SegmentModel>? segments = [];



    public SubCategoryModel? selectedSubCategory;
    public CategoryModel? selectedCategory;
    public QuestionModel? selectedQuestion;
    public SegmentModel? selectedSegment;


    protected override async Task OnInitializedAsync()
    {
        categories = await _uow.CategoryRepo.GetAllCategoriesWithSegmentsAndSubCategories();
        segments = await _uow.SegmentRepo.GetAllSegments();
        base.OnInitialized();

    }
    //open modal for edits based on the Object passed to the method
    public void OpenEditModal(object item)
    {
        //switch case for opening modal based on item
        switch (item)
        {
            case CategoryModel category:
                selectedCategory = category;
                break;

            case SubCategoryModel subCategory:
                selectedSubCategory = subCategory;
                break;

            case SegmentModel segment:
                selectedSegment = segment;
                break;

            case QuestionModel question:
                selectedQuestion = question;
                break;

            default:
                break;
        }
    }
    //delete based on whicg object is passed to the method
    private async Task DeleteItem(object item)
    {
        //switch case checking which item to delete
        switch (item)
        {
            case CategoryModel category when category != null:
                selectedCategory = category;
                await _uow.CategoryRepo.DeleteCategory(selectedCategory.Id);
                // NavigationManager.NavigateTo(NavigationManager.ToBaseRelativePath(NavigationManager.Uri), true);
                break;

            case SubCategoryModel subCategory when subCategory != null:
                selectedSubCategory = subCategory;
                await _uow.SubCategoryRepo.DeleteSubCategory(selectedSubCategory.Id);
                break;

            case SegmentModel segment when segment != null:
                selectedSegment = segment;
                await _uow.SegmentRepo.DeleteSegment(selectedSegment.Id);
                break;

            case QuestionModel question when question != null:
                selectedQuestion = question;
                await _uow.QuestionRepo.DeleteQuestion(selectedQuestion.Id);
                break;

            case PromptModel prompt when prompt != null:
                await _uow.PromptRepo.DeletePrompt(prompt.Id);
                break;

            default:
                break;
        }
        await _uow.CategoryRepo.GetAllCategoriesWithSegmentsAndSubCategories();
        ClearSelected();
    }

    //logic for closing Edit Modal
    public void ClearSelected()
    {
        selectedSubCategory = null;
        selectedCategory = null;
        selectedSegment = null;
        selectedQuestion = null;
    }

    // Method to handle form submission
    private async Task HandleValidSubmit()
    {

        if (selectedCategory != null)
        {
            // Update category
            await _uow.CategoryRepo.UpdateCategory(selectedCategory);
        }
        else if (selectedSegment != null)
        {
            // Update segment
            await _uow.SegmentRepo.UpdateSegment(selectedSegment);
        }
        else if (selectedSubCategory != null)
        {
            // Update subcategory
            await _uow.SubCategoryRepo.UpdateSubCategory(selectedSubCategory);
        }
        else if (selectedQuestion != null)
        {
            //update question
            await _uow.QuestionRepo.UpdateQuestion(selectedQuestion);
        }
        ClearSelected();
        await _uow.CategoryRepo.GetAllCategoriesWithSegmentsAndSubCategories();
        // NavigationManager.NavigateTo(NavigationManager.ToBaseRelativePath(NavigationManager.Uri), true);
    }
    private void NavigateToAdd()
    {
        NavigationManager.NavigateTo("admin/add");
    }



}
