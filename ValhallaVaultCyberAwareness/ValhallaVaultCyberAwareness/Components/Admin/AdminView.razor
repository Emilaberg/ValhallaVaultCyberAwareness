@page "/adminview"
@using System.ComponentModel.DataAnnotations
@using ValhallaVaultCyberAwareness.Data.Models
@using ValhallaVaultCyberAwareness.Repositories
@inject IValhallaUow _uow

@rendermode InteractiveServer

<h3 class="mt-4">Admin</h3>

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row ">
        @foreach (var category in categories)
        {
            <div class="col-md-12 mb-4 ">
                <div class="card shadow bg-black text-light">
                    <div class="card-body">
                        <h5 class="card-title">@category.CategoryName</h5>
                        <div class="row">
                            @foreach (var segment in category.Segments)
                            {
                                <div class="col-md-4 bg-black">
                                    <h6>@segment.SegmentName</h6>
                                    <ul class="list-group list-group-flush">
                                        @foreach (var subCategory in segment.SubCategory)
                                        {
                                            <li class="list-group-item bg-black">
                                                <button class="btn btn-outline-light" @onclick="() => OpenEditModal(subCategory)">@subCategory.SubCategoryName</button>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (selectedSubCategory != null)
{
    <div class="modal show" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Subcategory</h5>
                </div>
                <div class="modal-body">
                    <EditForm Model="selectedSubCategory" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label" for="subCategoryName">Subcategory Name:</label>
                            <InputText class="form-control" id="subCategoryName" @bind-Value="selectedSubCategory.SubCategoryName" />
                            <ValidationMessage For="@(() => selectedSubCategory.SubCategoryName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Questions:</label>
                            @foreach (var question in questions)
                            {
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="question.Question" />
                                </div>
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Prompts:</label>
                            @foreach (var prompt in prompts)
                            {
                                <div class="input-group mb-3">
                                    <InputText class="form-control" @bind-Value="prompt.Prompt" />
                                </div>
                            }
                        </div>

                        <div class="text-end">
                            <button class="btn btn-primary" type="submit" @onclick="ClearSelectedSubCategory">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClearSelectedSubCategory">Close</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    public List<PromptModel> prompts = [];
    public List<QuestionModel> questions = [];
    public List<CategoryModel> categories = [];
    private SubCategoryModel selectedSubCategory = new();
    private QuestionModel question = new();

    protected override async Task OnInitializedAsync()
    {
        categories = await _uow.CategoryRepo.GetAllCategoriesWithSegmentsAndSubCategories();


    }

    private async void OpenEditModal(SubCategoryModel subcategory)
    {
        selectedSubCategory = subcategory;

        questions = await _uow.QuestionRepo.GetQuestionBySubCategory(subcategory.Id);

        foreach (var question in questions)
        {
            prompts = await _uow.PromptRepo.GetPromptByQuestion(question.Id);
        }

        StateHasChanged(); // Ensure UI refreshes after setting selectedSubCategory
    }

    private void ClearSelectedSubCategory()
    {
        selectedSubCategory = null;
    }

    // Method to handle form submission
    private async Task HandleValidSubmit()
    {
        // Update database with new imputs in form
        await _uow.SubCategoryRepo.UpdateSubCategory(selectedSubCategory);

        foreach (var question in questions)
        {
            await _uow.QuestionRepo.UpdateQuestion(question);
        }

        foreach (var prompt in prompts)
        {
            await _uow.PromptRepo.UpdatePrompt(prompt);
        }
    }


}
