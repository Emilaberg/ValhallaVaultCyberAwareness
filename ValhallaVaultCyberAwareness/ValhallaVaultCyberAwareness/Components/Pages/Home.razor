@page "/home"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@inject IValhallaUow Uow
@using ValhallaVaultCyberAwareness.Components.Pages
@using ValhallaVaultCyberAwareness.Data
@using ValhallaVaultCyberAwareness.Data.Models
@using ValhallaVaultCyberAwareness.Repositories
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor


<div>
    <h1>Hello!</h1>
</div>



<p>
    Welcome to your new Valhalla Vault Cyber Awareness Training Portal.
    <br />
    These are the different subjects you can learn about:
</p>

<div>
    <label for="categoryDropdown">Select a Category:</label>
    <select id="categoryDropdown" @onchange="OnCategoryChange">
        <option value="">-- Select Category --</option>
        @if (categories != null)
        {
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.CategoryName</option>
            }
        }
    </select>
</div>

@if (selectedCategory != null)
{
    <div>
        <label for="segmentDropdown">Select a Segment:</label>
        <select id="segmentDropdown" @onchange="OnSegmentChange">
            <option value="">-- Select Segment --</option>
            @foreach (var segment in selectedCategory.Segments)
            {
                <option value="@segment.Id">@segment.SegmentName</option>
            }
        </select>
    </div>
}

@if (selectedSegment != null)
{
    <div>
        <label for="subcategoryDropdown">Select a Subcategory:</label>
        <select id="subcategoryDropdown" @onchange="OnSubcategoryChange">
            <option value="">-- Select Subcategory --</option>
            @foreach (var subcategory in selectedSegment.SubCategory)
            {
                <option value="@subcategory.Id">@subcategory.SubCategoryName</option>
            }
        </select>
    </div>
    @if (selectedSubcategory != null)
    {
        <div>
            <button type="submit" @onclick="NavigateToFrageSida" disabled="@(!canAccessNextSubCategory)">Go to the quizz!</button>
        </div>
    }
}

@code {
    private List<PromptModel> prompts;
    private List<CategoryModel> categories;
    private CategoryModel selectedCategory;
    private SegmentModel selectedSegment;
    private SubCategoryModel selectedSubcategory;
    private string errorMessage;
    private double completionPercentage;
  


    private bool canAccessNextSubCategory;

    

    // ...
       
        // ...
    



    

    protected override async Task OnInitializedAsync()
    {
        categories = await Uow.CategoryRepo.GetAllCategoriesWithSegmentsAndSubCategories();
        prompts = await Uow.PromptRepo.GetAllPrompts();

        // Fetch the first category, segment, and subcategory
        selectedCategory = categories.FirstOrDefault();
        selectedSegment = selectedCategory?.Segments.FirstOrDefault();
        selectedSubcategory = selectedSegment?.SubCategory.FirstOrDefault();

        // Check if the user can access the next subcategory
        canAccessNextSubCategory = await CanAccessNextSubCategory();
    }


    private async void OnCategoryChange(ChangeEventArgs e)
    {
        var categoryId = int.Parse(e.Value.ToString());
        selectedCategory = categories.FirstOrDefault(c => c.Id == categoryId);
        canAccessNextSubCategory = await CanAccessNextSubCategory();
    }

    private async void OnSegmentChange(ChangeEventArgs e)
    {
        var segmentId = int.Parse(e.Value.ToString());
        selectedSegment = selectedCategory?.Segments.FirstOrDefault(s => s.Id == segmentId);
        canAccessNextSubCategory = await CanAccessNextSubCategory();
    }

    private async Task<bool> CanAccessNextSubCategory()
    {
        var user = HttpContextAccessor.HttpContext.User != null ? await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User) : null;
        bool isFirstCategory = selectedCategory == categories.FirstOrDefault();
        bool isFirstSegment = selectedSegment == selectedCategory?.Segments.FirstOrDefault();
        bool isFirstSubcategory = selectedSubcategory == selectedSegment?.SubCategory.FirstOrDefault();

        // If the selected category, segment, and subcategory are the first ones, return true
        if (isFirstCategory && isFirstSegment && isFirstSubcategory)
        {
            return true;
        }

        // Otherwise, check if the user has more than 80% progress in the current category
        int categoryProgress = await GetCategoryProgress(selectedCategory);
        bool hasEnoughProgress = categoryProgress >= 80;

        return hasEnoughProgress && user != null && selectedSubcategory != null &&
               await Uow.SubCategoryRepo.CanAccessNextSubCategory(user.Id, selectedSubcategory.Id);
    }

    private async void OnSubcategoryChange(ChangeEventArgs e)
    {
        var subcategoryId = int.Parse(e.Value.ToString());
        selectedSubcategory = selectedSegment?.SubCategory.FirstOrDefault(sc => sc.Id == subcategoryId);
        canAccessNextSubCategory = await CanAccessNextSubCategory();
    }

    private async Task<int> GetCategoryProgress(CategoryModel category)
    {
        var segments = await Uow.SegmentRepo.GetSegmentByCategory(category.Id);
        var totalSubCategories = 0;
        var completedSubCategories = 0;

        foreach (var segment in segments)
        {
            var subCategories = await Uow.SubCategoryRepo.GetSubcategoriesBySegment(segment.Id);
            totalSubCategories += subCategories.Count;
            completedSubCategories += subCategories.Count(sc => sc.IsCompleted);
        }

        return totalSubCategories == 0 ? 0 : (completedSubCategories * 100) / totalSubCategories;
    }
    

    private void NavigateToFrageSida()
    {
        if (selectedSubcategory != null)
        {
            NavigationManager.NavigateTo($"/questions/{selectedSubcategory.Id}");
        }
    }

    }
    }







