
@page "/home"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager NavigationManager
@inject MyProgressService ProgressService
@* @inject IValhallaUow Uow *@
@using ValhallaVaultCyberAwareness.Components.Pages
@using ValhallaVaultCyberAwareness.Data
@* @using static ValhallaVaultCyberAwareness.Repositories.IValhallaUow
 *@
<div>
    <h1>Hello!</h1>
</div>

<p>
    Welcome to your new Valhalla Vault Cyber Awareness Training Portal.
    <br />
    These are the different subjects you can learn about:
</p>

<SearchBox />

@if (userProgress != null)
{
    foreach (var progress in userProgress)
    {
        <p>@progress.Key: @progress.Value%</p>
    }
}

@code{
    private Dictionary<string, double>? userProgress;

    protected override async Task OnInitializedAsync()
    {
        var userId = "YourUserId"; // Replace with actual user id
        userProgress = await ProgressService.GetUserProgress(userId);
    }

    public class MyProgressService
    {
        private readonly ApplicationDbContext _context;

        public MyProgressService(ApplicationDbContext context)
        {
            _context = context;
        }

        public async Task<Dictionary<string, double>> GetUserProgress(string userId)
        {
            var progress = new Dictionary<string, double>();

            var categories = await _context.SubCategories.ToListAsync();

            foreach (var category in categories)
            {
                var totalQuestions = await _context.Questions
                    .Where(q => q.SubCategoryId == category.Id)
                    .CountAsync();

                var answeredQuestions = await _context.Questions
                    .Where(q => q.SubCategoryId == category.Id && q.ApplicationUsers.Any(u => u.Id == userId))
                    .CountAsync();

                if (totalQuestions > 0)
                {
                    var progressPercentage = (double)answeredQuestions / totalQuestions * 100;
                    progress.Add(category.SubCategoryName ?? string.Empty, progressPercentage);
                }
            }

            return progress;
        }
    }
}
