@page "/Q"
@using ValhallaVaultCyberAwareness.Data.Models
@using ValhallaVaultCyberAwareness.Repositories
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IValhallaUow Uow;


<h3>Questions</h3>
@if(AllQuestions == null)
{
    <div>Loading...</div>
}else
{
    <div>
        @if(currentQuestion != AllQuestions.Count)
        {
            <div>
                <h1 style="color:white;">
                    @AllQuestions[currentQuestion].Question
                </h1>

                <div>
                    @foreach (var prompt in AllQuestions[currentQuestion].Prompts)
                    {
                        <div style="color:white;">
                            <input type="radio" id="@prompt.Id" name="prompt" value="@prompt.Prompt" @onclick="() => setAnswer(prompt)">
                            <label for="prompt">@prompt.Prompt</label>
                        </div>
                    }
                </div>
                @if(answeredCorrect)
                {
                    <div style="color:white;">
                        You answered correctly!
                    </div>
                }

                <button style="color:white;"  @onclick="CheckAnswer">check answer</button>

                <button style ="color:white;" @onclick="NextQuestion">Next question</button>
                <button style="color:white;" @onclick="PrevQuestion">Prev question</button>


            </div>
        }
    </div>
}

@code {
    public List<QuestionModel> AllQuestions = [];
    public int currentQuestion = 0;

    public bool answeredCorrect;
    public PromptModel? answeredPrompt;

    protected override async Task OnInitializedAsync()
    {
        var questions = await Uow.QuestionRepo.GetAllQuestions();

        if(questions != null)
        {
            AllQuestions = questions;
        }

    }

    public void PrevQuestion()
    {
        if(currentQuestion == 0)
        {
            return;
        }
        currentQuestion--;
        answeredCorrect = false;
        answeredPrompt = null;
    }

    public void NextQuestion()
    {
        currentQuestion++;
        answeredCorrect = false;
        answeredPrompt = null;
    }

    public void CheckAnswer()
    {
        if (answeredPrompt == null)
        {
            return;
        }

        if (answeredPrompt.IsCorrect)
        {
            answeredCorrect = true;
        }
    }

    public void setAnswer(PromptModel prompt)
    {
        answeredPrompt = prompt;
    }
}


